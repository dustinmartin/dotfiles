# Easier navigation: .., ..., ~ and -
alias ..="cd .."
alias ...="cd ../.."

# Start Mongo
alias mongostart='mongod run --config /usr/local/etc/mongod.conf'

# Fix rake to work with zsh
alias rake="noglob rake"

# Miscellaneous Helpers
alias reload="source ~/.zshrc"

# Set vim as the editor
export EDITOR='vim'

# List all files colorized in long format, including dot files
alias la="ls -Gla"

# List only directories
alias lsd='ls -l | grep "^d"'

# List files with details
alias ll="ls -Gl"

# Show colors for ls
alias ls="ls -G"

# Show all hidden files
alias showf="defaults write com.apple.finder AppleShowAllFiles TRUE; killall Finder"

# Hide all hidden files
alias hidef="defaults write com.apple.finder AppleShowAllFiles FALSE; killall Finder"

# ColdFusion 9
alias cf9="/Applications/ColdFusion9/bin/coldfusion"

# ColdFusion 10
alias cf10="/Applications/ColdFusion10/cfusion/bin/coldfusion"

# Git
alias g='git'
alias gs='git status -s'
alias gst='git status'
alias gpl='git pull'
alias gpu='git push'
alias gf='git fetch'
alias gm='git merge'
alias gco='git checkout'
alias gb='git branch'
alias grb='git rebase'
alias gd='git diff'
alias ga='git add'
alias grm='git rm'

# Commit staged changed and provide some stats on the commit
alias gc='git commit -v -m'

# Stage all updated/added/deleted files and commit
alias gca='git add -u && git add . && git commit -v -m'

# Create a new branch
alias gcob='git checkout -b'

# Stage all updated/added/deleted files
alias gaa='git add -u && git add . && git status'

# Detailed Log
alias gl='git log --stat'

# Branch History
alias glbh='git hist'

# Current feature branch commits
alias glfc='git log develop..HEAD'

# My commits in last deployment (equivalent to git log --author=Dustin 20120730-04..20120801-01)
alias glmc='git log --author "$(git config --get user.name)" "$(git tag | tail -2 | head -1)..$(git tag | tail -1)"'

# Updates a branch
gup() {
	if [[ $(is_git_dirty) = true ]] then
	    echo "The repo is dirty. Please commit all changes first."
	else
		echo "Fetching updates from origin"
		git fetch origin 
		echo
		echo "Repasing origin/develop"
		git rebase origin/develop
	fi
}

# Interactive rebase
gir() {
	if [[ $(is_git_dirty) = true ]] then
	    echo "The repo is dirty. Please commit all changes first."
	else
		echo "Rebasing (interactive) origin/develop"
		git rebase -i origin/develop
	fi
}

# Merges branch back into develop
gdone() {
	if [[ $(is_git_dirty) = true ]] then
	    echo "The repo is dirty. Please commit all changes first."
	else
		branch=$(current_branch)
		echo "Fetching changes 'develop' - git fetch origin develop"
		git fetch origin develop
		echo
		echo "Rebasing - git rebase origin/develop"
		git rebase origin/develop
		echo
		echo "Checking out 'develop' - git checkout develop"
		git checkout develop
		echo
		echo "Pulling 'develop' - git pull --ff-only"
		git pull --ff-only
		echo
		echo "Merging into 'develop' - git merge --no-ff $branch"
		git merge --no-ff $branch
		echo
		echo "Pushing changes from 'develop' to repo - git push origin develop"
		git push origin develop		
	fi
}

# Get the current branch
current_branch() {
	ref=$(git symbolic-ref HEAD 2> /dev/null) || return
	echo ${ref#refs/heads/}
}

# Returns if the git repo in the current directory is dirty
is_git_dirty() {
	if [[ $(git status 2> /dev/null | tail -n1) != "nothing to commit (working directory clean)" ]] then
		echo true
	else
		echo false
	fi
}
