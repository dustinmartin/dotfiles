" ---------------------------------------------------------------------------
" Vundle
" ---------------------------------------------------------------------------

filetype off                   " required!

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" Let Vundle manage Vundle
Bundle 'gmarik/vundle'

" Install other bundles
Bundle 'vim-scripts/The-NERD-tree'
Bundle 'tpope/vim-fugitive'
Bundle 'tpope/vim-markdown'
Bundle 'Lokaltog/vim-easymotion'
Bundle 'mileszs/ack.vim'
Bundle 'davejlong/cf-utils.vim'
Bundle 'tpope/vim-surround'
Bundle 'garbas/vim-snipmate'
Bundle 'mattn/zencoding-vim'
Bundle 'scrooloose/syntastic'
Bundle 'ervandew/supertab'
Bundle 'honza/snipmate-snippets'
Bundle 'tomtom/tcomment_vim'
Bundle 'sjl/gundo.vim'
Bundle 'kien/ctrlp.vim'
Bundle 'Raimondi/delimitMate'
Bundle 'https://github.com/Lokaltog/vim-powerline.git'
Bundle 'henrik/vim-indexed-search'
Bundle 'myusuf3/numbers.vim'

" Color schemes
Bundle 'chriskempson/vim-tomorrow-theme'
Bundle 'nanotech/jellybeans.vim'

" Utility Bundles
Bundle 'vim-scripts/L9'
Bundle 'tomtom/tlib_vim'
Bundle 'MarcWeber/vim-addon-mw-utils'

" ---------------------------------------------------------------------------
" General
" ---------------------------------------------------------------------------

syntax on 						" Enable syntax highlighting
filetype plugin indent on 		" Detect and handle filetypes
set nocompatible 				" Don't be compatible with Vi

" ---------------------------------------------------------------------------
" Colors / Theme
" ---------------------------------------------------------------------------

colorscheme jellybeans

" ---------------------------------------------------------------------------
" Files
" ---------------------------------------------------------------------------

set fileencoding=utf-8
set fileformat=unix
set fileformats=unix,mac,dos

" ---------------------------------------------------------------------------
" UI
" ---------------------------------------------------------------------------

set autoread 					" Reload files
set shiftwidth=4 				" Number of spaces to use for each step of (auto)indent
set tabstop=4 					" Number of spaces that a <Tab> in the file counts for
set autoindent 					" Copy the indent from the current line when starting a new line
set nowrap						" Turn word wrapping off. :set wrap turns it back on.
set tabpagemax=50 				" Increase the number of allowed tabs
set showtabline=2 				" Always show the tabline
set ruler						" Turn on row,column dislay on status bar
set backspace=2           		" Allow backspacing over everything in insert mode
set whichwrap+=<,>,h,l,[,] 		" Backspace and cursor keys wrap too
set visualbell 					" Disable 'beep' for wrong commands and do screen flash
set cursorline 					" Highlights the cursor line
set ttyfast 					" Makes scrolling smoother
set laststatus=2 				" Always show the statusline
set textwidth=0 				" Prevent Vim from wrapping lines
set wrapmargin=0 				" Prevent Vim from wrapping lines
set sidescroll=1 				" Number of columns to scroll horizontally
set sidescrolloff=10            " Number of columns to keep to the left and right of cursor
set mouse=a						" Enable mouse
set showcmd						" Show command in bottom right of window
set clipboard=unnamed			" Enable the system clipboard
set showmode 					" Don't show the current Vim mode
set lazyredraw  				" Don't update the display while executing macros
set wrapscan 					" Set the search scan to wrap around the file
set virtualedit=block 			" Allow the cursor to go in to "invalid" places
set wrap linebreak nolist 		" Break/wrap lines in between words instead of the middle of a word
set shortmess+=I 				" Skip the splash screen
set wildmenu 					" Command completion with tab
let mapleader = ","				" Set leader key to comma

"  ---------------------------------------------------------------------------
"  Status Line
"  ---------------------------------------------------------------------------

" Filename
set statusline=\ [%t]

" Modified Flag
set statusline+=\ %m

" Preview Screen Flag
set statusline+=%w

" Left / Right Alignment Separater 
set statusline+=%=

" Syntastic
" set statusline+=%#warningmsg#
" set statusline+=%{SyntasticStatuslineFlag()}
" set statusline+=%*

" Git branch
" set statusline+=\ %{fugitive#statusline()}

" Encoding
set statusline+=\ [%{strlen(&fenc)?&fenc:&enc}]

" Line x of y
set statusline+=\ [Line\ %l\/%L]

" Percentage Through File
set statusline+=\ [%P]  

" Extra space
set statusline+=\  

" ---------------------------------------------------------------------------
" GUI/MacVim Options
" ---------------------------------------------------------------------------

if has("gui_running")
	" Set the tab labels
	set guitablabel=%t\ %m

	" Hide the toolbar
	set guioptions-=T 

	" Set the font
	set guifont=Ubuntu\ Mono\ for\ Powerline:h18 " Set the font style and size

	" Window size
	set lines=39 columns=140 	 " Set the window size

	" Disable the scrollbars
	set guioptions-=L			 " Disable left scrollbar
	set guioptions-=r			 " Disable right scrollbar
endif

" ---------------------------------------------------------------------------
" Splits 
" ---------------------------------------------------------------------------

" Open a new split and switch to it
noremap <leader>vs <C-w>v<C-w>l
noremap <leader>hs <C-w>s<C-w>j

" Move around the splits
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" ---------------------------------------------------------------------------
" Searching
" ---------------------------------------------------------------------------

set ignorecase 							" Makes searches case insensitive if search string is all lower case
set smartcase 							" Makes searches case SENSITIVE if search string contains an uppercase letter
set gdefault                    		" Search/replace 'globally' (on a line) by default
set incsearch 							" Show where the pattern matches so far
set showmatch 							" Highlight the matching bracket when one is inserted
set hlsearch 							" Highlight search results (as you type)

" ----------------------------------------------------------------------------
" Backups and Swap Files
" ----------------------------------------------------------------------------

set undolevels=1000
set nobackup                   			" Do not keep backups after close
set nowritebackup               		" Do not keep a backup while working
set noswapfile                 			" Don't keep swp files either
set backupcopy=yes              		" Keep attributes of original file
set directory=~/.vim/swap				" Keep swp files under ~/.vim/swap
set backupdir=~/.vim/backup  			" Store backups under ~/.vim/backup

" ----------------------------------------------------------------------------
" Sessions
" ----------------------------------------------------------------------------

" What parts of the session should be saved?
set sessionoptions=curdir,tabpages,localoptions,folds

function! RestoreSession()
	if argc() == 0 "vim called without arguments
		execute 'source ~/.vim/session'
	end
endfunction

function! SaveSession()
	if argc() == 0 "vim called without arguments
		execute 'mksession! ~/.vim/session'
	end
endfunction

autocmd VimEnter * call RestoreSession()
autocmd VimLeave * call SaveSession()

" -----------------------------------------------------------
"  Tabs
" -----------------------------------------------------------

" Open a new tab
map <leader>t :tabnew<CR>

" -----------------------------------------------------------
"  Tabline
" -----------------------------------------------------------

set tabline=%!MyTabLine()

function! MyTabLine()
	let s = ''

	for i in range(tabpagenr('$'))
		" select the highlighting
		if i + 1 == tabpagenr()
			let s .= '%#TabLineSel#'
		else
			let s .= '%#TabLine#'
		endif

		" set the tab page number (for mouse clicks)
		let s .= '%' . (i + 1) . 'T' 

		let tabNum = i + 1
		let s .= ' '. tabNum . ') '

		" the label is made by MyTabLabel()
		let s .= ' %{MyTabLabel(' . (i + 1) . ')}'
	endfor			

	" after the last tab fill with TabLineFill and reset tab page nr
	let s .= '%#TabLineFill#%T'

	" right-align the label to close the current tab page
	if tabpagenr('$') > 1 
		let s .= '%=%#TabLine#%999X[close]'
	endif

	return s
endfunction

function! MyTabLabel(n)
	let buflist = tabpagebuflist(a:n)
	let winnr = tabpagewinnr(a:n)
	
	let label  = bufname(buflist[winnr - 1]) 

	if label == ''
		let label = 'Untitled'
	endif

	let label .= (getbufvar(buflist[winnr - 1], "&mod")?' + ':'   ')

	return fnamemodify(label, ":t") 
endfunction

hi TabLineFill ctermfg=LightGrey ctermbg=Black
hi TabLine ctermfg=LightGrey ctermbg=Black
hi TabLineSel term=underline ctermfg=LightGrey ctermbg=DarkGrey

" -----------------------------------------------------------
" Misc Mappings
" -----------------------------------------------------------

" Preserve indentation while pasting text from the OS X clipboard
noremap <leader>p :set paste<CR>:put  *<CR>:set nopaste<CR>

" Open the scratchpad
map <Leader>sp :vs ~/Dropbox/Notes/scratchpad.md<CR>

" Close panel/window
map <leader>x :close<cr>

"Shortcut for editing  vimrc file in a new tab
nmap <leader>ev :tabedit $MYVIMRC<cr>
nmap <leader>sv :source $MYVIMRC<cr>

" Map tab to indent
vnoremap <Tab> >gv
nnoremap <Tab> >>

" Bubble single lines
nmap <C-Up> ddkP
nmap <C-Down> ddp
imap <C-Up> <esc>ddkP
nmap <C-Down> <esc>ddp

" Map shift+tab to unindent
vnoremap <S-Tab> <gv
nnoremap <S-Tab> <<

" Bubble multiple lines
vmap <C-Up> xkP`[V`]
vmap <C-Down> xp`[V`]

" Keep a block selected after indenting
vnoremap < <gv
vnoremap > >gv

" Visually select the text that was last edited/pasted
nmap gV `[v`]

" Use 'real' regexes
nnoremap / /\v
vnoremap / /\v

" Map ESC
imap jj <ESC>

" -----------------------------------------------------------
" Movement
" -----------------------------------------------------------

" Movement by screen line instead of file line
nnoremap j gj
nnoremap k gk

" Allow mode selection vs shift-j (J) and shift-k (K)
nnoremap J V gj
nnoremap K V gk
vnoremap J gj
vnoremap K gk

" Remap ; to :
vnoremap ; :
nnoremap ; :

" -----------------------------------------------------------
" Code Folding
" -----------------------------------------------------------

set foldenable 							" Enable folding
set foldcolumn=0 						" Don't add a fold column
set foldlevelstart=99            		" Start out with nothing folded

" Allow the use of indent and manual folding together
augroup vimrc
	au BufReadPre * setlocal foldmethod=indent
	au BufWinEnter * if &fdm == 'indent' | setlocal foldmethod=manual | endif
augroup END

" What actions open a fold?
set foldopen=block,hor,insert,jump,mark,percent,quickfix,search,tag,undo

" -----------------------------------------------------------
" ZenCoding 
" -----------------------------------------------------------

let g:user_zen_expandabbr_key = '<c-z>'

" -----------------------------------------------------------
" NerdTree
" -----------------------------------------------------------

" Toggle nerdtree
vnoremap <leader>nt <ESC> :NERDTreeToggle<CR>
nnoremap <leader>nt :NERDTreeToggle<CR>

" Show the bookmarks table on startup
let NERDTreeShowBookmarks=1

" Show hidden files, too
let NERDTreeShowFiles=1

" Quit on opening files from the tree
let NERDTreeQuitOnOpen=0

" Highlight the selected entry in the tree
let NERDTreeHighlightCursorline=1

" Use a single click to fold/unfold directories and a double click to open files
let NERDTreeMouseMode=2

" Allow NerdTree to change Vim's CD
let NERDTreeChDirMode=2

" -----------------------------------------------------------
" Syntastic 
" -----------------------------------------------------------

let g:syntastic_check_on_open=1

" -----------------------------------------------------------
" SnipMate 
" -----------------------------------------------------------

let g:snips_trigger_key='<c-space>'

" -----------------------------------------------------------
" Gundo 
" -----------------------------------------------------------

nnoremap <leader>u :GundoToggle<CR>
vnoremap <leader>u :GundoToggle<CR>

" -----------------------------------------------------------
" CtrlP
" -----------------------------------------------------------

inoremap <C-p> <ESC>:CtrlPMixed<CR>
vnoremap <C-p> <ESC>:CtrlPMixed<CR>
let g:ctrlp_cmd = 'CtrlPMixed'
let g:ctrlp_working_path_mode = ''
let g:ctrlp_custom_ignore = '\v[\/](\.git|\.hg|\.svn|\.DS_Store)$'

" -----------------------------------------------------------
" Powerline
" -----------------------------------------------------------

let g:Powerline_symbols = 'fancy'

" -----------------------------------------------------------
" tComment
" -----------------------------------------------------------

call tcomment#DefineType('cfscript', '// %s')
call tcomment#DefineType('cfscript_block', '/* %s */')
call tcomment#DefineType('cfml', '<!--- %s --->')
call tcomment#DefineType('cfml_block', '<!--- %s --->')
