" Author: Dustin Martin <dm@dustinmartin.net>
" Source: https://github.com/dustinmartin/dotfiles

" Bundles --------------------------------------------------------- {{{

filetype off                   " required!

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" Let Vundle manage Vundle
Bundle 'gmarik/vundle'

" Install other bundles
Bundle 'vim-scripts/The-NERD-tree'
Bundle 'tpope/vim-fugitive'
Bundle 'tpope/vim-markdown'
Bundle 'tpope/vim-surround'
Bundle 'tpope/vim-haml'
Bundle 'tpope/vim-unimpaired'
Bundle 'Lokaltog/vim-easymotion'
Bundle 'rking/ag.vim'
Bundle 'godlygeek/tabular'
Bundle 'SirVer/ultisnips'
Bundle 'mattn/emmet-vim'
Bundle 'scrooloose/syntastic'
Bundle 'tomtom/tcomment_vim'
Bundle 'kien/ctrlp.vim'
Bundle 'Raimondi/delimitMate'
Bundle 'Lokaltog/vim-powerline'
Bundle 'hail2u/vim-css3-syntax'
Bundle 'groenewege/vim-less'
Bundle 'terryma/vim-multiple-cursors'
Bundle 'othree/javascript-libraries-syntax.vim'
Bundle 'jelera/vim-javascript-syntax'
Bundle 'pangloss/vim-javascript'
" Bundle 'Valloric/YouCompleteMe'
Bundle 'xolox/vim-misc'
Bundle 'xolox/vim-session'
Bundle 'nathanaelkane/vim-indent-guides'
Bundle 'docunext/closetag.vim'
Bundle 'sjl/gundo.vim'
Bundle 'tpope/vim-rails'
Bundle 'ervandew/supertab'
Bundle 'jnwhiteh/vim-golang'

" Color schemes
Bundle 'tomasr/molokai'
Bundle 'nanotech/jellybeans.vim'

" }}}
" Vim Settings ---------------------------------------------------- {{{

syntax on                                " Enable syntax highlighting
filetype plugin indent on                " Detect and handle filetypes

let mapleader = ","                      " Set leader key to comma
let maplocalleader = "\\"

if $TERM == "xterm-256color" || $TERM == "screen-256color" || $COLORTERM == "gnome-terminal"
    set t_Co=256    " Enable 256 colors in terminal
    " set t_md=       " Disable bold fonts in the terminal
endif

colorscheme molokai

set nocompatible                         " Don't be compatible with Vi
set encoding=utf-8
set fileencoding=utf-8
set fileformat=unix
set fileformats=unix,mac,dos
set hidden                               " Allow unsaved buffers to be hidden
set nowrap                               " Turn word wrapping off. :set wrap turns it back on.
set tabpagemax=50                        " Increase the number of allowed tabs
set showtabline=2                        " Always show the tabline
set ruler                                " Turn on row,column dislay on status bar
set backspace=2                          " Allow backspacing over everything in insert mode
set whichwrap+=<,>,h,l,[,]               " Backspace and cursor keys wrap too
set visualbell                           " Disable 'beep' for wrong commands and do screen flash
set cursorline                           " Highlights the cursor line
set ttyfast                              " Makes scrolling smoother
set laststatus=2                         " Always show the statusline
set textwidth=0                          " Prevent Vim from wrapping lines
set wrapmargin=0                         " Prevent Vim from wrapping lines
set sidescroll=1                         " Number of columns to scroll horizontally
set sidescrolloff=10                     " Number of columns to keep to the left and right of cursor
set scrolloff=1                          " Number of rows to keep above/below the cursor
set mouse=a                              " Enable mouse
set showcmd                              " Show command in bottom right of window
set clipboard=unnamed                    " Default to the system clipboard
set showmode                             " Don't show the current Vim mode
set lazyredraw                           " Don't update the display while executing macros
set wrapscan                             " Set the search scan to wrap around the file
set virtualedit=block                    " Allow the cursor to go in to invalid places in visual block mode
set shortmess+=I                         " Skip the splash screen
set matchtime=3                          " How many tenths of a second to highlight a matching parentheses
set spelllang=en_us                      " Set the spell check dictionary
set number
set relativenumber
set shiftwidth=4                         " Number of spaces to use for each step of (auto)indent
set tabstop=4                            " Number of spaces that a <Tab> in the file counts for
set softtabstop=4
set expandtab
set autoindent                           " Copy the indent from the current line when starting a new line
set nosmartindent
set nocindent
set linespace=2
set switchbuf=usetab,newtab              " Open new buffers always in new tabs
set splitright                           " Split vertical windows right to the current windows
set splitbelow                           " Split horizontal windows below to the current windows
set autoread                             " Automatically reread changed files without asking me anything
set suffixesadd+=.js                     " Help VIM find .js files when using gf
set list
set listchars=tab:»\ ,eol:\ ,trail:·,extends:❯,precedes:❮
set ignorecase                           " Makes searches case insensitive if search string is all lower case
set smartcase                            " Makes searches case SENSITIVE if search string contains an uppercase letter
set gdefault                             " Search/replace 'globally' (on a line) by default
set incsearch                            " Start searching before pressing enter
set showmatch                            " Highlight the matching bracket when one is inserted
set hlsearch                             " Highlight search results (as you type)
set noswapfile
set nobackup
set undolevels=1000                      " The number of undo levels to allow
set complete-=i
set formatoptions-=r                     " Don't add comment prefix to next line

" What actions open a fold?
set foldopen=block,hor,insert,jump,mark,percent,quickfix,search,tag,undo

" Time out on key codes but not mappings.
" Basically this makes terminal Vim work sanely.
set notimeout
set ttimeout
set ttimeoutlen=10
" set noesckeys

" }}}
" Wildmenu Completion --------------------------------------------- {{{

set wildmenu
set wildmode=full

set wildignore+=.hg,.git,.svn                    " Version control
set wildignore+=*.aux,*.out,*.toc                " LaTeX intermediate files
set wildignore+=*.jpg,*.bmp,*.gif,*.png,*.jpeg   " binary images
set wildignore+=*.o,*.obj,*.exe,*.dll,*.manifest " compiled object files
set wildignore+=*.spl                            " compiled spelling word lists
set wildignore+=*.sw?                            " Vim swap files
set wildignore+=*.DS_Store                       " OSX
set wildignore+=*.luac                           " Lua byte code
set wildignore+=migrations                       " Django migrations
set wildignore+=*.pyc                            " Python byte code
set wildignore+=*.orig                           " Merge resolution files
set wildignore+=log/**,node_modules/**,target/**,tmp/**,*.rbc

" }}}
" GUI Settings ---------------------------------------------------- {{{

if has("gui_running")

    " Set the tab labels
    set guitablabel=%t\ %m

    set guioptions-=T                        " Hide the toolbar
    set guioptions-=e                        " Don't use GUI tabs
    set guioptions-=L                        " Disable left scrollbar
    set guioptions-=r                        " Disable right scrollbar

    " Set the font
    set guifont=Ubuntu\ Mono:h18             " Set the font style and size

    " Window size
    set lines=40 columns=130                 " Set the window size

endif

" }}}
" Status Line ----------------------------------------------------- {{{

" Filename
set statusline=\ [%t]

" Modified Flag
set statusline+=\ %m

" Preview Screen Flag
set statusline+=%w

" Left / Right Alignment Separater
set statusline+=%=

" Encoding
set statusline+=\ [%{strlen(&fenc)?&fenc:&enc}]

" Line x of y
set statusline+=\ [Line\ %l\/%L]

" Percentage Through File
set statusline+=\ [%P]

" Extra space
set statusline+=\

" }}}
" Tab Line -------------------------------------------------------- {{{

set tabline=%!MyTabLine()

function! MyTabLine()
    let s = ''

    for i in range(tabpagenr('$'))
        " select the highlighting
        if i + 1 == tabpagenr()
            let s .= '%#TabLineSel#'
        else
            let s .= '%#TabLine#'
        endif

        " set the tab page number (for mouse clicks)
        let s .= '%' . (i + 1) . 'T'

        let tabNum = i + 1
        let s .= ' '. tabNum . ') '

        " the label is made by MyTabLabel()
        let s .= ' %{MyTabLabel(' . (i + 1) . ')}'
    endfor

    " after the last tab fill with TabLineFill and reset tab page nr
    let s .= '%#TabLineFill#%T'

    " right-align the label to close the current tab page
    if tabpagenr('$') > 1
        let s .= '%=%#TabLine#%999X[X]'
    endif

    return s
endfunction

function! MyTabLabel(n)
    let buflist = tabpagebuflist(a:n)
    let winnr = tabpagewinnr(a:n)
    let label  = bufname(buflist[winnr - 1])

    if label == ''
        let label = 'Untitled'
    endif

    let label .= (getbufvar(buflist[winnr - 1], "&mod")?' + ':'   ')

    return fnamemodify(label, ":t")
endfunction

hi TabLine      guifg=#999999 guibg=#333333 gui=none    ctermfg=White ctermbg=DarkGrey cterm=none
hi TabLineSel   guifg=#000000 guibg=#666666 gui=bold    ctermfg=231 ctermbg=235 cterm=bold
hi TabLineFill  guifg=#999999 guibg=#333333 gui=none    ctermfg=White ctermbg=DarkGrey cterm=none

" }}}
" Custom Commands ------------------------------------------------- {{{

" Close all buffers
command! Bda 1,1000 bd

" Set filetype to Javascript
command! SetJS set ft=javscript

" Format the JSON in the current file
command! FormatJSON %!python -m json.tool

" Remove  (caret M) from files
command! RemoveM %s///g

" }}}
" Key Mappings ---------------------------------------------------- {{{

" Shift tab to unindent
" imap <S-Tab> <C-o><<

" Q: Closes the window
nnoremap Q :q<cr>

" _ : Quick horizontal splits
nnoremap _ :sp<cr>

" | : Quick vertical splits
nnoremap <bar> :vsp<cr>

" w!!: Writes using sudo
cnoremap w!! w !sudo tee % >/dev/null

" Select (charwise) the contents of the current line, excluding indentation.
nnoremap vv ^vg_

" Make ' go to the exact position
noremap ' `

" Easier to type, and I never use the default behavior.
noremap H ^
noremap L $
vnoremap L g_

" Use standard regexes
nnoremap / /\v
vnoremap / /\v

" Keep the result in the center of the screen
nnoremap <silent> n nzz
nnoremap <silent> N Nzz
nnoremap <silent> * *zz
nnoremap <silent> # #zz
nnoremap <silent> g* g*zz
nnoremap <silent> g# g#zz

" Yank till end of line
nnoremap Y y$

" U does some weird stuff. Remap to u
nnoremap U u
vnoremap U u

" Prevent vim from unindenting on blank lines
" inoremap <cr> <cr>x<bs>
" nnoremap o ox<BS>
" nnoremap O Ox<BS>

" Map tab to indent
vnoremap <Tab> >gv
nnoremap <Tab> >>

" Bubble single lines
nmap <C-Up> [e
nmap <C-Down> ]e
imap <C-Up> <esc>[e
imap <C-Down> <esc>]e

" Bubble multiple lines
vmap <C-Up> [egv
vmap <C-Down> ]egv

" Map shift+tab to unindent
vnoremap <S-Tab> <gv
nnoremap <S-Tab> <<

" Keep a block selected after indenting
vnoremap < <gv
vnoremap > >gv

" Visually select the text that was last edited/pasted
nmap gV `[v`]

" Map ESC
imap jj <ESC>

" Movement by screen line instead of file line
nnoremap j gj
nnoremap k gk

nnoremap <down> gj
nnoremap <up> gk

" Allow mode selection vs shift-j (J) and shift-k (K)
" nnoremap J V gj
" nnoremap K V gk
" vnoremap J gj
" vnoremap K gk

" Remap ; to :
vnoremap ; :
nnoremap ; :

" Refocus folds
nnoremap ,z zMzvzz

" Make zO recursively open whatever top level fold we're in, no matter where the cursor happens to be.
" nnoremap zO zCzO

" CtrlP
inoremap <C-p> <ESC>:CtrlP<CR>
vnoremap <C-p> <ESC>:CtrlP<CR>

" Move around the splits
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Resize Splits
nnoremap <leader>v> :vertical resize +3<cr>
nnoremap <leader>v< :vertical resize -3<cr>

nnoremap <leader>h> :resize +1<cr>
nnoremap <leader>h< :resize -1<cr>

" }}}
" Leader Mappings ------------------------------------------------- {{{

" Move tabs
nnoremap <Leader>mr :tabm +1<CR>
nnoremap <Leader>ml :tabm -1<CR>

" Toggle Syntastic
nnoremap <Leader>ss :SyntasticToggleMode<CR>

" Change quotation marks
nnoremap <Leader>"" :%s/'/"<CR>
nnoremap <Leader>'' :%s/"/'<CR>

" Trim Whitespace
nnoremap <Leader>ws :%s/\s\+$//e<CR>

" Show Gundo
nnoremap <leader>u :GundoToggle<cr>

" Delete buffer without messing up windows/panes
nnoremap <leader>dd :Bdelete<cr>

" nnoremap <leader>n :vimgrep /\v[A-Za-z0-9\_\$\.]+\s*(\=|:)\s*function\s*\(.*\)/ %<cr>

" Git
nnoremap <leader>gd :Gdiff<cr>
nnoremap <leader>gs :Gstatus<cr>
nnoremap <leader>gw :Gwrite<cr>
nnoremap <leader>ga :Gadd<cr>
nnoremap <leader>gb :Gblame<cr>
nnoremap <leader>gco :Gcheckout<cr>
nnoremap <leader>gcm :Gcommit<cr>
nnoremap <leader>gm :Gmove<cr>
nnoremap <leader>gr :Gremove<cr>

" Open a new split and switch to it
" noremap <leader>vs <C-w>v<C-w>l
" noremap <leader>hs <C-w>s<C-w>j

nnoremap <leader>t :tabnew<CR>
vnoremap <leader>t :tabnew<CR>

nnoremap <Leader>sp :set spell!<CR>
nnoremap <leader>ww :set wrap! linebreak nolist<CR>

nnoremap <leader>ev :tabedit $MYVIMRC<cr>
nnoremap <leader>sv :source $MYVIMRC<cr>

" Preserve indentation while pasting text from the os x clipboard
nnoremap <leader>p :set paste<cr>:put  *<cr>:set nopaste<cr>

" Toggle nerdtree
vnoremap <leader>nt <ESC> :NERDTreeToggle<CR>
nnoremap <leader>nt :NERDTreeToggle<CR>

" Open up current file in NERDTree
nnoremap <leader>nf :NERDTree<CR><C-w>p:NERDTreeFind<CR>

" CtrlP
nnoremap <leader>b :CtrlPBuffer<CR>
nnoremap <leader>f :CtrlP<CR>

" Tabularize
nnoremap <Leader>a= :Tabularize /=<CR>
vnoremap <Leader>a= :Tabularize /=<CR>
nnoremap <Leader>a: :Tabularize /:<CR>
vnoremap <Leader>a: :Tabularize /:<CR>
vnoremap <Leader>a, :Tabularize /[^,]\+,<CR>
nnoremap <Leader>a, :Tabularize /[^,]\+,<CR>

" Ag
nnoremap <leader>ag :Ag!<space>

" }}}
" Folding --------------------------------------------------------- {{{

function! CustomFoldText()

    "get first non-blank line
    let fs = v:foldstart

    while getline(fs) =~ '^\s*$' | let fs = nextnonblank(fs + 1)
    endwhile

    if fs > v:foldend
        let line = getline(v:foldstart)
    else
        let line = substitute(getline(fs), '\t', repeat(' ', &tabstop), 'g')
    endif

    let w = winwidth(0) - &foldcolumn - (&number ? 8 : 0)
    let foldSize = 1 + v:foldend - v:foldstart
    let foldSizeStr = " " . foldSize . " lines "
    let foldLevelStr = repeat("+--", v:foldlevel)
    let lineCount = line("$")
    let foldPercentage = printf("[%.1f", (foldSize*1.0)/lineCount*100) . "%] "
    let expansionString = repeat(" ", w - strwidth(foldSizeStr.line.foldLevelStr.foldPercentage))

    return line . expansionString . foldSizeStr . foldPercentage . foldLevelStr

endfunction

set foldtext=CustomFoldText()

" }}}
" File Renaming --------------------------------------------------- {{{

function! RenameFile()

    let old_name = expand('%')
    let new_name = input('New file name: ', expand('%'), 'file')

    if new_name != '' && new_name != old_name
        exec ':saveas ' . new_name
        exec ':silent !rm ' . old_name
        redraw!
    endif

endfunction

nnoremap <Leader>r :call RenameFile()<cr>

" }}}
" Plugin Settings ------------------------------------------------- {{{

" --- Session ------------- {{{

let g:session_autosave = 'yes'
let g:session_autoload = 'yes'
let g:session_default_to_last = 1

" }}}
" --- Emmet --------------- {{{

" let g:user_emmet_expandabbr_key = '<c-z>'

" }}}
" --- Nerdtree ------------ {{{

" Show the bookmarks table on startup
let NERDTreeShowBookmarks=0

" Show hidden files, too
let NERDTreeShowFiles=1

" Quit on opening files from the tree
let NERDTreeQuitOnOpen=0

" Highlight the selected entry in the tree
let NERDTreeHighlightCursorline=1

" Use a single click to fold/unfold directories and a double click to open files
let NERDTreeMouseMode=2

" Allow NerdTree to change Vim's CD
let NERDTreeChDirMode=2

" }}}
" --- Syntastic ----------- {{{

let g:syntastic_check_on_open=0
let g:syntastic_enable_signs=1

" }}}
" --- CtrlP --------------- {{{

" Search by filename
let g:ctrlp_by_filename = 1
let g:ctrlp_tabpage_position= 'al'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_custom_ignore = {
    \ 'dir':  '\v[\/]\.(git|hg|svn)$',
    \ 'file': '\v\.(jpg|jpeg|png|gif|zip|pdf|dmg)$'
    \ }
" let g:ctrlp_prompt_mappings = {
"     \ 'AcceptSelection("e")': ['<c-t>'],
"     \ 'AcceptSelection("t")': ['<cr>', '<2-LeftMouse>'],
"     \ }

let g:ctrlp_working_path_mode = 0
let g:ctrlp_clear_cache_on_exit = 0

" }}}
" --- Powerline ----------- {{{

let g:Powerline_symbols = 'compatible'

" }}}
" --- Ultisnips ----------- {{{

let g:UltiSnipsExpandTrigger="<c-space>"
let g:UltiSnipsListSnippets="<c-s-space>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"

" }}}
" --- Javascript Lib ------ {{{

let g:used_javascript_libs = 'angularjs,jquery,underscore'

" }}}
" --- Indent Guides ------- {{{

let g:indent_guides_guide_size = 1
let g:indent_guides_start_level = 1

" }}}
" --- MatchTagAlways ------ {{{

let g:mta_set_default_matchtag_color = 0
let g:mta_use_matchparen_group = 0

highlight MatchTag ctermfg=black ctermbg=darkgrey guifg=black guibg=darkgrey

" }}}

" }}}
" Autocmd --------------------------------------------------------- {{{

" Only show cursorline in the current window and in normal mode.
augroup cursor_line
    au!
    " au WinLeave,InsertEnter * set nocursorline
    " au WinEnter,InsertLeave * set cursorline
augroup END

" --- Window Resize ------- {{{

augroup window_resize
    au!
    au VimResized * :wincmd =
augroup END

" }}}
" --- Vim ----------------- {{{

augroup ft_vim
    au!

    au FileType vim setlocal foldmethod=marker
    " au FileType help setlocal textwidth=78
    " au BufWinEnter *.txt if &ft == 'help' | wincmd L | endif
augroup END

" }}}
" --- CSS ----------------- {{{

augroup ft_css
    au!

    au BufNewFile,BufRead *.less setlocal filetype=less
    au BufNewFile,BufRead *.scss setlocal filetype=sass
    au BufNewFile,BufRead *.sass setlocal filetype=sass

    au Filetype less,css,sass setlocal foldmethod=marker
    au Filetype less,css,sass setlocal foldmarker={,}

    au BufRead,BufNewFile *.css setlocal shiftwidth=4 softtabstop=4
    au BufRead,BufNewFile *.less setlocal shiftwidth=4 softtabstop=4
    au BufRead,BufNewFile *.scss setlocal shiftwidth=4 softtabstop=4
    au BufRead,BufNewFile *.sass setlocal shiftwidth=4 softtabstop=4

    " Use <leader>S to sort properties.  Turns this:
    au BufNewFile,BufRead *.less,*.css,*.scss nnoremap <buffer> <localleader>S ?{<CR>jV/\v^\s*\}?$<CR>k:sort<CR>:noh<CR>
augroup END

" }}}
" --- Java ---------------- {{{

augroup ft_java
    au!

    au FileType java setlocal foldmethod=marker
    au FileType java setlocal foldmarker={,}
augroup END

" }}}
" --- Javascript ---------- {{{

augroup ft_javascript
    au!

    au FileType javascript setlocal foldmethod=marker
    au FileType javascript setlocal foldmarker={,}

augroup END

" }}}
" --- Markdown ------------ {{{

augroup ft_markdown
    au!

    au BufNewFile,BufRead *.m*down setlocal filetype=markdown foldlevel=1
    au BufNewFile,BufRead *.md setlocal filetype=markdown foldlevel=1

    " Use <localleader>1/2/3 to add headings.
    au Filetype markdown nnoremap <buffer> <localleader>1 I#<space><ESC>
    au Filetype markdown nnoremap <buffer> <localleader>2 I##<space><ESC>
    au Filetype markdown nnoremap <buffer> <localleader>3 I###<space><ESC>

    au Filetype markdown nnoremap <buffer> <localleader>h mzI#<ESC>`zl

augroup END

" }}}
" --- Ruby ---------------- {{{

augroup ft_ruby
    au!

    au Filetype ruby setlocal foldmethod=syntax

    au BufRead,BufNewFile Gemfile setlocal filetype=ruby
    au BufRead,BufNewFile Capfile setlocal filetype=ruby
    au BufRead,BufNewFile *.rabl setlocal filetype=ruby

    au BufRead,BufNewFile *.rb setlocal shiftwidth=2 softtabstop=2
    au BufRead,BufNewFile *.rabl setlocal shiftwidth=2 softtabstop=2

augroup END

" }}}
" --- Scala --------------- {{{

augroup ft_scala
    au!
    au Filetype scala setlocal foldmethod=marker foldmarker={,}
augroup END

" }}}
" --- Vagrant ------------- {{{

augroup ft_vagrant
    au!
    au BufRead,BufNewFile Vagrantfile setlocal filetype=ruby
augroup END

" }}}
" --- HTML ---------------- {{{

augroup ft_html
    au!

    au FileType html setlocal foldmethod=manual

    " Use <localleader>f to fold the current tag.
    au FileType html nnoremap <buffer> <localleader>f Vatzf

    " Indent tag
    au FileType html nnoremap <buffer> <localleader>= Vat=

    " Don't highlight HTML links
    " au FileType html :hi link htmlLink NONE<CR>

augroup END

" }}}
" --- Yaml ---------------- {{{

augroup ft_yaml
    au!

    au BufNewFile,BufRead *.yml setlocal filetype=yaml

    au Filetype yaml setlocal foldmethod=indent
    au Filetype yaml setlocal shiftwidth=2 softtabstop=2

augroup END

" }}}
" --- Go ------------------ {{{

augroup ft_go
    au!

    au FileType go setlocal foldmethod=marker
    au FileType go setlocal foldmarker={,}

augroup END

" }}}

" }}}
