" ---------------------------------------------------------------------------
" Vundle
" ---------------------------------------------------------------------------
 filetype off                   " required!

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" Let Vundle manage Vundle
Bundle 'gmarik/vundle'

" Install other bundles
Bundle 'altercation/vim-colors-solarized'
Bundle 'vim-scripts/The-NERD-tree'

" ---------------------------------------------------------------------------
" General
" ---------------------------------------------------------------------------

syntax on 						" Enable syntax highlighting
filetype plugin indent on 		" Detect and handle filetypes
set nocompatible 				" Don't be compatible with Vi

" ---------------------------------------------------------------------------
" Colors / Theme / Font
" ---------------------------------------------------------------------------

colorscheme solarized 			" Set the colorscheme
set background=dark 			" Solarize has different color schemes.

" ---------------------------------------------------------------------------
" UI
" ---------------------------------------------------------------------------

set fileencoding=utf-8
set fileformat=unix
set fileformats=unix,mac,dos
set autoread 					" Reload files
set shiftwidth=4 				" Number of spaces to use for each step of (auto)indent
set tabstop=4 					" Number of spaces that a <Tab> in the file counts for
set autoindent 					" Copy the indent from the current line when starting a new line
set nowrap						" Turn word wrapping off. :set wrap turns it back on.
set nu!							" Turn on line numbers
set tabpagemax=50 				" Increase the number of allowed tabs
set showtabline=2 				" Always show the tabline
set ruler						" Turn on row,column dislay on status bar
set backspace=2           		" Allow backspacing over everything in insert mode
set whichwrap+=<,>,h,l,[,] 		" Backspace and cursor keys wrap too
set wildmenu 					" Command completion with tab
set visualbell 					" Disable 'beep' for wrong commands and do screen flash
set cursorline 					" Highlights the cursor line
set ttyfast 					" Makes scrolling smoother
set laststatus=2 				" A more informatives status line
set textwidth=0 				" Prevent Vim from wrapping lines
set wrapmargin=0 				" Prevent Vim from wrapping lines
set sidescroll=1 				" Number of columns to scroll horizontally
set sidescrolloff=10            " Number of columns to keep to the left and right of cursor
set mouse=a						" Enable mouse
set showcmd						" Show command in bottom right of window
set clipboard+=unnamed			" Enable the system clipboard

" What parts of the session should be saved?
set sessionoptions=curdir,folds,help,options,tabpages,winsize

" Define what the statusline looks like
set statusline=%<%f\ %h%m%r%=%k[%{&ff}][%{(&fenc==\"\")?&enc:&fenc}%{(&bomb?\",BOM\":\"\")}]\ %-14.(%l,%c%V%)\ %P

" ---------------------------------------------------------------------------
" GUI/MacVim Options
" ---------------------------------------------------------------------------

if has("gui_running")
	" Set the tab labels
	set guitablabel=%t\ %m

	" Hide the toolbar
	set guioptions-=T 

	" Set the font
	set guifont=Monaco:h15		 " Set the font style and size

	" Window options
	set lines=39 columns=140 	 " Set the window size
	set guioptions-=L			 " Disable left scrollbar
	set guioptions-=r			 " Disable right scrollbar
endif

" ---------------------------------------------------------------------------
" Splits 
" ---------------------------------------------------------------------------

" Open a new split and switch to it
noremap <leader>vs <C-w>v<C-w>l
noremap <leader>hs <C-w>s<C-w>j
noremap <leader>c :close<CR>

" Move around the splits
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" ---------------------------------------------------------------------------
" Searching
" ---------------------------------------------------------------------------

set ignorecase 							" Makes searches case insensitive if search string is all lower case
set smartcase 							" Makes searches case SENSITIVE if search string contains an uppercase letter
set gdefault                    		" Search/replace 'globally' (on a line) by default
set incsearch 							" Show where the pattern matches so far
set showmatch 							" Highlight the matching bracket when one is inserted
set hlsearch 							" Highlight search results (as you type)
nnoremap <leader><space> :noh<cr> 		" Clear a search

" ----------------------------------------------------------------------------
" Backups and Swap Files
" ----------------------------------------------------------------------------

set undolevels=1000
set nobackup                   			" Do not keep backups after close
set nowritebackup               		" Do not keep a backup while working
set noswapfile                 			" Don't keep swp files either
set backupcopy=yes              		" Keep attributes of original file
set directory=~/.vim/swap				" Keep swp files under ~/.vim/swap
set backupdir=~/.vim/backup  			" Store backups under ~/.vim/backup

" ----------------------------------------------------------------------------
" Sessions
" ----------------------------------------------------------------------------

function! RestoreSession()
	if argc() == 0 "vim called without arguments
		execute 'source ~/.vim/session'
	end
endfunction

function! SaveSession()
	if argc() == 0 "vim called without arguments
		execute 'mksession! ~/.vim/session'
	end
endfunction

" autocmd VimEnter * call RestoreSession()
autocmd VimLeave * call SaveSession()

" -----------------------------------------------------------
"  Tabs
" -----------------------------------------------------------

" Open a new tab
map <leader>t :tabnew<CR>

" -----------------------------------------------------------
" Misc Mappings
" -----------------------------------------------------------

"Shortcut for editing  vimrc file in a new tab
nmap <leader>ev :tabedit $MYVIMRC<cr>

" Map tab to indent
vnoremap <Tab> >gv
nnoremap <Tab> >>

" Bubble single lines (kicks butt)
nmap <C-Up> ddkP
nmap <C-Down> ddp

" Bubble multiple lines
vmap <C-Up> xkP`[V`]
vmap <C-Down> xp`[V`]

" Keep a block selected after indenting
vnoremap < <gv
vnoremap > >gv

" Map shift+tab to unindent
vnoremap <S-Tab> <gv
nnoremap <S-Tab> <<

" Map ; to :
nnoremap ; :
vnoremap ; :

" Maps the spacebar to colon
nmap <space> :

" Visually select the text that was last edited/pasted
nmap gV `[v`]

" Use 'real' regexes
nnoremap / /\v
vnoremap / /\v

" -----------------------------------------------------------
" Movement
" -----------------------------------------------------------

" Movement by screen line instead of file line
nnoremap j gj
nnoremap k gk

" Allow mode selection vs shift-j (J) and shift-k (K)
nnoremap J V gj
nnoremap K V gk
vnoremap J gj
vnoremap K gk

" Map shift+arrow keys to highlight text
nmap <S-UP> v
nmap <S-DOWN> v
nmap <S-LEFT> v
nmap <S-RIGHT> v
vmap <S-UP> k
vmap <S-DOWN> j
vmap <S-LEFT> h
vmap <S-RIGHT> k

" Make arrow keys work in visual mode
vnoremap <LEFT> h
vnoremap <RIGHT> l
vnoremap <UP> gk
vnoremap <DOWN> gj

" Make arrow keys move by screen line, not file line, in normal mode
nnoremap <LEFT> h
nnoremap <RIGHT> l
nnoremap <UP> gk
nnoremap <DOWN> gj

" -----------------------------------------------------------
" Code Folding
" -----------------------------------------------------------

set foldenable 							" Enable folding
set foldcolumn=0 						" Add a fold column
set foldmethod=indent 					" Fold code based on indentation level
set foldlevelstart=99            		" Start out with everything folded

" What actions open a fold?
set foldopen=block,hor,insert,jump,mark,percent,quickfix,search,tag,undo

" -----------------------------------------------------------
" NerdTree
" -----------------------------------------------------------

" Toggle nerdtree
inoremap <leader>nt <ESC> :NERDTreeToggle<CR>
vnoremap <leader>nt <ESC> :NERDTreeToggle<CR>
nnoremap <leader>nt :NERDTreeToggle<CR>

" Show the bookmarks table on startup
let NERDTreeShowBookmarks=0

" Show hidden files, too
let NERDTreeShowFiles=1
" let NERDTreeShowHidden=1

" Quit on opening files from the tree
let NERDTreeQuitOnOpen=0

" Highlight the selected entry in the tree
let NERDTreeHighlightCursorline=1

" Use a single click to fold/unfold directories and a double click to open files
let NERDTreeMouseMode=2

" Allow NerdTree to change Vim's CD
let NERDTreeChDirMode=2

" Autopen NERDTree and focus cursor in new document
autocmd VimEnter * NERDTree
autocmd VimEnter * wincmd p
