" Bundles --------------------------------------------------------- {{{

filetype off                   " required!

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" Let Vundle manage Vundle
Bundle 'gmarik/vundle'

" Install other bundles
Bundle 'vim-scripts/The-NERD-tree'
Bundle 'tpope/vim-fugitive'
Bundle 'tpope/vim-markdown'
Bundle 'tpope/vim-surround'
Bundle 'tpope/vim-haml'
Bundle 'tpope/vim-unimpaired'
Bundle 'Lokaltog/vim-easymotion'
Bundle 'rking/ag.vim'
Bundle 'godlygeek/tabular'
Bundle 'SirVer/ultisnips'
Bundle 'ervandew/supertab'
Bundle 'mattn/emmet-vim'
Bundle 'scrooloose/syntastic'
Bundle 'tomtom/tcomment_vim'
Bundle 'kien/ctrlp.vim'
Bundle 'Raimondi/delimitMate'
Bundle 'Lokaltog/vim-powerline'
Bundle 'myusuf3/numbers.vim'
Bundle 'hail2u/vim-css3-syntax'
Bundle 'terryma/vim-multiple-cursors'
Bundle 'othree/javascript-libraries-syntax.vim'
Bundle 'jelera/vim-javascript-syntax'
Bundle 'pangloss/vim-javascript'
" Bundle 'marijnh/tern_for_vim'
Bundle 'Valloric/YouCompleteMe'
Bundle 'Valloric/MatchTagAlways'
" Bundle 'jceb/vim-orgmode'
Bundle 'chrisbra/NrrwRgn'
Bundle 'xolox/vim-misc'
Bundle 'xolox/vim-session'
Bundle 'goldfeld/vim-seek'

" Color schemes
Bundle 'tomasr/molokai'
Bundle 'nanotech/jellybeans.vim'

" }}}
" Vim Settings ---------------------------------------------------- {{{

syntax on 						" Enable syntax highlighting
filetype plugin indent on 		" Detect and handle filetypes

let mapleader = ","				" Set leader key to comma
let maplocalleader = "\\"

colorscheme molokai

set nocompatible 				" Don't be compatible with Vi
set fileencoding=utf-8
set fileformat=unix
set fileformats=unix,mac,dos
set hidden 						" Allow unsaved buffers to be hidden
set nowrap						" Turn word wrapping off. :set wrap turns it back on.
set tabpagemax=50 				" Increase the number of allowed tabs
set showtabline=0 				" Always show the tabline
set ruler						" Turn on row,column dislay on status bar
set backspace=2           		" Allow backspacing over everything in insert mode
set whichwrap+=<,>,h,l,[,] 		" Backspace and cursor keys wrap too
set visualbell 					" Disable 'beep' for wrong commands and do screen flash
set cursorline 					" Highlights the cursor line
set ttyfast 					" Makes scrolling smoother
set laststatus=2 				" Always show the statusline
set textwidth=0 				" Prevent Vim from wrapping lines
set wrapmargin=0 				" Prevent Vim from wrapping lines
set sidescroll=1 				" Number of columns to scroll horizontally
set sidescrolloff=10            " Number of columns to keep to the left and right of cursor
set scrolloff=1					" Number of rows to keep above/below the cursor
set mouse=a						" Enable mouse
set showcmd						" Show command in bottom right of window
set clipboard=unnamed			" Default to the system clipboard
set showmode 					" Don't show the current Vim mode
set lazyredraw  				" Don't update the display while executing macros
set wrapscan 					" Set the search scan to wrap around the file
set virtualedit=block 			" Allow the cursor to go in to invalid places in visual block mode
set shortmess+=I 				" Skip the splash screen
set wildmenu 					" Command completion with tab
set matchtime=3					" How many tenths of a second to highlight a matching parentheses
set spelllang=en_us 			" Set the spell check dictionary
set number
set shiftwidth=4 				" Number of spaces to use for each step of (auto)indent
set tabstop=4 					" Number of spaces that a <Tab> in the file counts for
set autoindent 					" Copy the indent from the current line when starting a new line
set nosmartindent
set nocindent
set linespace=2
set switchbuf=usetab,newtab 	" Open new buffers always in new tabs
set splitright                  " Split vertical windows right to the current windows
set splitbelow                  " Split horizontal windows below to the current windows
set autoread                    " Automatically reread changed files without asking me anything
set suffixesadd+=.js 			" Help VIM find .js files when using gf
set list
set listchars=tab:\ \ ,eol:\ ,extends:❯,precedes:❮
set ignorecase 							" Makes searches case insensitive if search string is all lower case
set smartcase 							" Makes searches case SENSITIVE if search string contains an uppercase letter
set gdefault                    		" Search/replace 'globally' (on a line) by default
set incsearch 							" Start searching before pressing enter
set showmatch 							" Highlight the matching bracket when one is inserted
set hlsearch 							" Highlight search results (as you type)
set noswapfile
set nobackup
set undolevels=1000 						" The number of undo levels to allow

if &encoding ==# 'latin1' && has('gui_running')
    set encoding=utf-8
endif

if $TERM == "xterm-256color" || $TERM == "screen-256color" || $COLORTERM == "gnome-terminal"
	set t_Co=256 	" Enable 256 colors in terminal
	set t_md= 		" Disable bold fonts in the terminal
endif

" }}}
" GUI Settings ---------------------------------------------------- {{{

if has("gui_running")

    " Set the tab labels
    set guitablabel=%t\ %m

    " Hide the toolbar
    set guioptions-=T 

    " Set the font
    " set guifont=Ubuntu\ Mono\ for\ Powerline:h18 " Set the font style and size
    set guifont=Ubuntu\ Mono:h18 " Set the font style and size

    " Window size
    set lines=40 columns=130 	 " Set the window size

    " Disable the scrollbars
    set guioptions-=L			 " Disable left scrollbar
    set guioptions-=r			 " Disable right scrollbar

    " Colorscheme
    colorscheme molokai

endif

" }}}
" Status Line ----------------------------------------------------- {{{

" Filename
set statusline=\ [%t]

" Modified Flag
set statusline+=\ %m

" Preview Screen Flag
set statusline+=%w

" Left / Right Alignment Separater 
set statusline+=%=

" Encoding
set statusline+=\ [%{strlen(&fenc)?&fenc:&enc}]

" Line x of y
set statusline+=\ [Line\ %l\/%L]

" Percentage Through File
set statusline+=\ [%P]  

" Extra space
set statusline+=\  

" }}}
" Tab Line -------------------------------------------------------- {{{

set tabline=%!MyTabLine()

function! MyTabLine()
	let s = ''

	for i in range(tabpagenr('$'))
		" select the highlighting
		if i + 1 == tabpagenr()
			let s .= '%#TabLineSel#'
		else
			let s .= '%#TabLine#'
		endif

		" set the tab page number (for mouse clicks)
		let s .= '%' . (i + 1) . 'T' 

		let tabNum = i + 1
		let s .= ' '. tabNum . ') '

		" the label is made by MyTabLabel()
		let s .= ' %{MyTabLabel(' . (i + 1) . ')}'
	endfor			

	" after the last tab fill with TabLineFill and reset tab page nr
	let s .= '%#TabLineFill#%T'

	" right-align the label to close the current tab page
	if tabpagenr('$') > 1 
		let s .= '%=%#TabLine#%999X[close]'
	endif

	return s
endfunction

function! MyTabLabel(n)
	let buflist = tabpagebuflist(a:n)
	let winnr = tabpagewinnr(a:n)
	
	let label  = bufname(buflist[winnr - 1]) 

	if label == ''
		let label = 'Untitled'
	endif

	let label .= (getbufvar(buflist[winnr - 1], "&mod")?' + ':'   ')

	return fnamemodify(label, ":t") 
endfunction

hi TabLineFill ctermfg=LightGrey ctermbg=Black
hi TabLine ctermfg=LightGrey ctermbg=Black
hi TabLineSel term=underline ctermfg=LightGrey ctermbg=DarkGrey

" }}}
" Key Mappings ---------------------------------------------------- {{{

" Use standard regexes
nnoremap / /\v
vnoremap / /\v

" Keep the result in the center of the screen
nnoremap <silent> n nzz
nnoremap <silent> N Nzz
nnoremap <silent> * *zz
nnoremap <silent> # #zz
nnoremap <silent> g* g*zz
nnoremap <silent> g# g#zz

" Yank till end of line
nnoremap Y y$ 

" U does some weird stuff. Remap to u
nnoremap U u
vnoremap U u

" Prevent vim from unindenting on blank lines
" inoremap <cr> <cr>x<bs>
" nnoremap o ox<BS>
" nnoremap O Ox<BS>

" Map tab to indent
vnoremap <Tab> >gv
nnoremap <Tab> >>

" Bubble single lines
nmap <C-Up> [e
nmap <C-Down> ]e
imap <C-Up> <esc>[e
imap <C-Down> <esc>]e

" Bubble multiple lines
vmap <C-Up> [egv
vmap <C-Down> ]egv

" Map shift+tab to unindent
vnoremap <S-Tab> <gv
nnoremap <S-Tab> <<

" Keep a block selected after indenting
vnoremap < <gv
vnoremap > >gv

" Visually select the text that was last edited/pasted
nmap gV `[v`]

" Map ESC
imap jj <ESC>

" Movement by screen line instead of file line
nnoremap j gj
nnoremap k gk

nnoremap <down> gj
nnoremap <up> gk

" Allow mode selection vs shift-j (J) and shift-k (K)
nnoremap J V gj
nnoremap K V gk
vnoremap J gj
vnoremap K gk

" Remap ; to :
vnoremap ; :
nnoremap ; :

" Refocus folds
nnoremap ,z zMzvzz

" Make zO recursively open whatever top level fold we're in, no matter where the cursor happens to be.
nnoremap zO zCzO

" CtrlP
inoremap <C-p> <ESC>:CtrlP<CR>
vnoremap <C-p> <ESC>:CtrlP<CR>

nnoremap <leader>gst :Gstatus<cr>

" Open a new split and switch to it
noremap <leader>vs <C-w>v<C-w>l
noremap <leader>hs <C-w>s<C-w>j

" Move around the splits
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" }}}
" Leader Mappings ------------------------------------------------- {{{

nnoremap <leader>t :tabnew<CR>
vnoremap <leader>t :tabnew<CR>
nnoremap <Leader>sp :set spell!<CR>
nnoremap <leader>ww :set wrap! linebreak nolist<CR>
nnoremap <leader>ev :tabedit $MYVIMRC<cr>
nnoremap <leader>sv :source $MYVIMRC<cr>

" Preserve indentation while pasting text from the os x clipboard
nnoremap <leader>p :set paste<cr>:put  *<cr>:set nopaste<cr>

" Toggle nerdtree
vnoremap <leader>nt <ESC> :NERDTreeToggle<CR>
nnoremap <leader>nt :NERDTreeToggle<CR>

" Open up current file in NERDTree
nnoremap <leader>nf :NERDTree<CR><C-w>p:NERDTreeFind<CR>

" CtrlP
nnoremap <leader>b :CtrlPBuffer<CR>
nnoremap <leader>f :CtrlP<CR>

" Tabularize
nnoremap <Leader>a= :Tabularize /=<CR>
vnoremap <Leader>a= :Tabularize /=<CR>
nnoremap <Leader>a: :Tabularize /:<CR>
vnoremap <Leader>a: :Tabularize /:<CR>

" Ag
nnoremap <leader>ag :Ag!<space>

" }}}
" Folding --------------------------------------------------------- {{{

function! CustomFoldText()

    "get first non-blank line
    let fs = v:foldstart

    while getline(fs) =~ '^\s*$' | let fs = nextnonblank(fs + 1)
    endwhile

    if fs > v:foldend
        let line = getline(v:foldstart)
    else
        let line = substitute(getline(fs), '\t', repeat(' ', &tabstop), 'g')
    endif

    let w = winwidth(0) - &foldcolumn - (&number ? 8 : 0)
    let foldSize = 1 + v:foldend - v:foldstart
    let foldSizeStr = " " . foldSize . " lines "
    let foldLevelStr = repeat("+--", v:foldlevel)
    let lineCount = line("$")
    let foldPercentage = printf("[%.1f", (foldSize*1.0)/lineCount*100) . "%] "
    let expansionString = repeat(" ", w - strwidth(foldSizeStr.line.foldLevelStr.foldPercentage))

    return line . expansionString . foldSizeStr . foldPercentage . foldLevelStr

endfunction

set foldtext=CustomFoldText()

" }}}
" Plugin Settings ------------------------------------------------- {{{

" --- Session ------------- {{{

let g:session_autosave = 'yes'
let g:session_autoload = 'yes'
let g:session_default_to_last = 1

" }}}
" --- Emmet --------------- {{{

let g:user_emmet_expandabbr_key = '<c-z>'

" }}}
" --- Nerdtree ------------ {{{

" Show the bookmarks table on startup
let NERDTreeShowBookmarks=1

" Show hidden files, too
let NERDTreeShowFiles=1

" Quit on opening files from the tree
let NERDTreeQuitOnOpen=0

" Highlight the selected entry in the tree
let NERDTreeHighlightCursorline=1

" Use a single click to fold/unfold directories and a double click to open files
let NERDTreeMouseMode=2

" Allow NerdTree to change Vim's CD
let NERDTreeChDirMode=2

" }}}
" --- Syntastic ----------- {{{

let g:syntastic_check_on_open=0
let g:syntastic_enable_signs=1

" }}}
" --- CtrlP --------------- {{{

" Search by filename
let g:ctrlp_by_filename = 1
let g:ctrlp_tabpage_position= 'c'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_custom_ignore = {
	\ 'dir':  '\v[\/]\.(git|hg|svn)$',
	\ 'file': '\v\.(jpg|jpeg|png|gif|zip|pdf|dmg)$'
	\ }
let g:ctrlp_prompt_mappings = {
    \ 'AcceptSelection("e")': ['<c-t>'],
    \ 'AcceptSelection("t")': ['<cr>', '<2-LeftMouse>'],
    \ }

let g:ctrlp_working_path_mode = 0
let g:ctrlp_clear_cache_on_exit = 0

" }}}
" --- Powerline ----------- {{{

let g:Powerline_symbols = 'compatible'

" }}}
" --- Ultisnips ----------- {{{

let g:UltiSnipsExpandTrigger="<c-space>"
let g:UltiSnipsListSnippets="<c-s-space>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"

" }}}
" --- Javascript Lib ------ {{{

let g:used_javascript_libs = 'angularjs,jquery,underscore'

" }}}

" }}}
" Autocmd --------------------------------------------------------- {{{

au VimResized * :wincmd =

" --- Vim ----------------- {{{

augroup filetype_vim
    au!

    au FileType vim setlocal foldmethod=marker
    au FileType help setlocal textwidth=78
    au BufWinEnter *.txt if &ft == 'help' | wincmd L | endif
augroup END

" }}}

" }}}
