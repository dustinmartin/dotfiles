call pathogen#runtime_append_all_bundles()
call pathogen#helptags()

" ---------------------------------------------------------------------------
" General
" ---------------------------------------------------------------------------

syntax on 						" Enable syntax highlighting
filetype plugin indent on 		" Detect and handle filetypes
set nocompatible 				" Don't be compatible with Vi

if has("win32")
	source $VIMRUNTIME/mswin.vim
endif

" ---------------------------------------------------------------------------
" Colors / Theme / Font
" ---------------------------------------------------------------------------

colorscheme solarized 			" Set the colorscheme
set background=dark 			" Solarize has different color schemes.
if has("win32")
	set guifont=Consolas:h11    " Set the font style and size
else
	set guifont=Monaco:h13		" Set the font style and size
endif

" ---------------------------------------------------------------------------
" UI
" ---------------------------------------------------------------------------

set fileencoding=utf-8
set fileformat=unix
set fileformats=unix,mac,dos
set autoread 					" Reload files (no local changes only)
set shiftwidth=4 				" Number of spaces to use for each step of (auto)indent
set tabstop=4 					" Number of spaces that a <Tab> in the file counts for
set autoindent 					" Copy the indent from the current line when starting a new line
set guioptions-=T 				" Hide the toolbar
set nowrap						" Turn word wrapping off. :set wrap turns it back on.
set nu!							" Turn on line numbers
set tabpagemax=50 				" Increase the number of allowed tabs
set showtabline=2 				" Always show the tabline
set ruler						" Turn on row,column dislay on status bar
set backspace=2           		" Allow backspacing over everything in insert mode
set whichwrap+=<,>,h,l,[,] 		" Backspace and cursor keys wrap too
set wildmenu 					" Command completion with tab
set visualbell 					" Disable 'beep' for wrong commands and do screen flash
set cursorline 					" Highlights the cursor line
set ttyfast 					" Makes scrolling smoother
set laststatus=2 				" A more informatives status line
set textwidth=0 				" Prevent Vim from wrapping lines
set wrapmargin=0 				" Prevent Vim from wrapping lines
set virtualedit=block,onemore   " allow the cursor to go in to invalid places
set sidescroll=1 				" Number of columns to scroll horizontally
set sidescrolloff=10            " Number of columns to keep to the left and right of cursor
"set selectmode=key 			" Turn off select mode
set selection=exclusive 		" Don't copy the character under the cursor (keep vim from copying
								" carriage returns. Must be used with virtualedit option of all/onemore
								" or the last character will never be copied"

set statusline=%<%f\ %h%m%r%=%k[%{&ff}][%{(&fenc==\"\")?&enc:&fenc}%{(&bomb?\",BOM\":\"\")}]\ %-14.(%l,%c%V%)\ %P

" What parts of the session should be saved?
set sessionoptions=curdir,folds,help,options,tabpages,winsize

let macvim_hig_shift_movement=1 " Turn on selection via shift+arrow keys

if has("win32")
	set guioptions+=b            " Enable bottom scrollbar
	set guioptions-=t            " Disable tear-off menus
	set lines=30 columns=115     " Set the screen size
else
	set lines=55 columns=140 	 " Set the window size
	set guioptions-=L			 " Disable left scrollbar
	set guioptions-=r			 " Disable right scrollbar
endif

" ---------------------------------------------------------------------------
" Windows
" ---------------------------------------------------------------------------

" Open a new split and switch to it
noremap <leader>v <C-w>v<C-w>l
noremap <leader>s <C-w>s<C-w>j
noremap <leader>c :close<CR>

" Move around the splits
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Move around the splits
nnoremap <C-S-left> <C-w>h
nnoremap <C-S-down> <C-w>j
nnoremap <C-S-up> <C-w>k
nnoremap <C-S-right> <C-w>l

" ---------------------------------------------------------------------------
" Searching
" ---------------------------------------------------------------------------

set ignorecase 							" Makes searches case insensitive if search string is all lower case
set smartcase 							" Makes searches case SENSITIVE if search string contains an uppercase letter
set gdefault                    		" search/replace 'globally' (on a line) by default
set incsearch 							" Show where the pattern matches so far
set showmatch 							" Highlight the matching bracket when one is inserted
set hlsearch 							" Highlight search results (as you type)
nnoremap <leader><space> :noh<cr> 		" Clear a search

" ----------------------------------------------------------------------------
" Backups
" ----------------------------------------------------------------------------

set undolevels=1000
set undofile
set nobackup                   			" do not keep backups after close
set nowritebackup               		" do not keep a backup while working
set noswapfile                 			" don't keep swp files either
set backupcopy=yes              		" keep attributes of original file
if has("win32")
	set directory=~/vimfiles/swap		" keep swp files under ~/.vim/swap
	set backupdir=~/vimfiles/backup  	" store backups under ~/.vim/backup
	set undodir=~/vimfiles/undo
else
	set directory=~/.vim/swap			" keep swp files under ~/.vim/swap
	set backupdir=~/.vim/backup  		" store backups under ~/.vim/backup
	set undodir=~/.vim/undo
endif

" ----------------------------------------------------------------------------
" Sessions
" ----------------------------------------------------------------------------

function! RestoreSession()
	if argc() == 0 "vim called without arguments
		if has("win32")
			execute 'source ~/vimfiles/session'
		else
			execute 'source ~/.vim/session'
		endif
	end
endfunction

function! SaveSession()
	if argc() == 0 "vim called without arguments
		if has("win32")
			execute 'mksession! ~/vimfiles/session'
		else
			execute 'mksession! ~/.vim/session'
		endif
	end
endfunction

" autocmd VimEnter * call RestoreSession()
autocmd VimLeave * call SaveSession()

" -----------------------------------------------------------
"  Tabs
" -----------------------------------------------------------

" Set the tab labels
set guitablabel=%t\ %m

" Open a new tab
map <leader>t :tabnew<CR>

" C-TAB and C-SHIFT-TAB cycle tabs forward and backward
nmap <c-tab> :tabnext<cr>
nmap <c-s-tab> :tabprevious<cr>

" -----------------------------------------------------------
"  Function Key Shortcuts
" -----------------------------------------------------------

" F1 to toggle nerdtree
inoremap <F1> <ESC> :NERDTreeToggle<CR>
vnoremap <F1> <ESC> :NERDTreeToggle<CR>
nnoremap <F1> :NERDTreeToggle<CR>

" F2 to toggle visual/select mode
vnoremap <F2> <c-g>
snoremap <F2> <c-g>

" F11 to load the previous session
if has("win32")
	inoremap <F11> <ESC> :source ~/vimfiles/session<CR>
	vnoremap <F11> <ESC> :source ~/vimfiles/session<CR>
	nnoremap <F11> :source ~/vimfiles/session<CR>
else
	inoremap <F11> <ESC> :source ~/.vim/session<CR>
	vnoremap <F11> <ESC> :source ~/.vim/session<CR>
	nnoremap <F11> :source ~/.vim/session<CR>
endif

" F12 to reload vimrc
inoremap <F12> <ESC> :source $MYVIMRC<CR>
vnoremap <F12> <ESC> :source $MYVIMRC <CR>
nnoremap <F12>  :source $MYVIMRC <CR>

" -----------------------------------------------------------
" Misc Mappings
" -----------------------------------------------------------

" Trim trailing white space
nnoremap <leader>w :%s/\s\+$//<cr>:let @/=''<CR>

" Map tab to indent
vnoremap <Tab> >gv
nnoremap <Tab> >>

" Map shift+tab to unindent
vnoremap <S-Tab> <gv
nnoremap <S-Tab> <<

" Map ; to :
nnoremap ; :
vnoremap ; :

" Toggle between insert and normal mode
" nnoremap <C-space> a
" imap <C-space> <Esc>
" nnoremap <S-space> a
" imap <S-space> <Esc>

" Visually select the text that was last edited/pasted
nmap gV `[v`]

" Keep a block selected after indenting
vnoremap < <gv
vnoremap > >gv

" Use 'real' regexes
nnoremap / /\v
vnoremap / /\v

" -----------------------------------------------------------
" Movement
" -----------------------------------------------------------

" Movement by screen line instead of file line
nnoremap j gj
nnoremap k gk

" Allow mode selection vs shift-j (J) and shift-k (K)
nnoremap J V gj
nnoremap K V gk
vnoremap J gj
vnoremap K gk

" Make arrow keys work in visual mode
vnoremap <LEFT> h
vnoremap <RIGHT> l
vnoremap <UP> gk
vnoremap <DOWN> gj

" Make arrow keys move by screen line, not file line, in normal mode
nnoremap <LEFT> h
nnoremap <RIGHT> l
nnoremap <UP> gk
nnoremap <DOWN> gj

" Bubble single lines
nmap <C-Up> [e
nmap <C-Down> ]e

" Bubble multiple lines
vmap <C-Up> [egv
vmap <C-Down> ]egv

" -----------------------------------------------------------
" Movement
" -----------------------------------------------------------

set foldenable 							" enable folding
set foldcolumn=0 						" add a fold column
set foldmethod=indent 					" detect triple-{ style fold markers
set foldlevelstart=99            		" start out with everything folded

" What actions open a fold?
set foldopen=block,hor,insert,jump,mark,percent,quickfix,search,tag,undo

" -----------------------------------------------------------
" NerdTree
" -----------------------------------------------------------

" Show the bookmarks table on startup
let NERDTreeShowBookmarks=0

" Show hidden files, too
let NERDTreeShowFiles=1
" let NERDTreeShowHidden=1

" Quit on opening files from the tree
let NERDTreeQuitOnOpen=0

" Highlight the selected entry in the tree
let NERDTreeHighlightCursorline=1

" Use a single click to fold/unfold directories and a double click to open files
let NERDTreeMouseMode=2

" Allow NerdTree to change Vim's CD
let NERDTreeChDirMode=2
