snippet try "try/catch" b
try {
	$1
} catch (error) {
	$2
}
endsnippet

snippet tern "Tenary" w
${0:condition} ? ${1:true} : ${1:false}
endsnippet

snippet mock "Mock" b
const mocker = require('$1');

module.exports = function(target) {
	const fixtures = {
		$2: {
		}
	};

	const methods = {
		$3: {
			default: () => Promise.resolve(fixtures.$2)
		}
	};

	return mocker.createMock(target, fixtures, methods);
};
endsnippet

snippet line "line" b
// -- ${0:Private} -------------------------------------- //
endsnippet

snippet log "logger.info()" b
logger.${1:info}({ ${2} }, '${3}');
endsnippet

snippet con "console.log()" b
console.log('${1} >>>>>>>', $1);
endsnippet

snippet pretty "JSON.stringify" b
console.log('${1} >>>>>>>', JSON.stringify($1, null, 2));
endsnippet

# snippet time "console.log()" b
# console.time( $0 );
# console.timeEnd( $0 );
# endsnippet

# snippet time "console.time()"
# console.time( $0 );
# ${VISUAL}
# console.timeEnd( $1 );
# endsnippet

snippet switch "switch" b
switch ($1){
case '$2':
	break;
default:
	break;
}
endsnippet

snippet fn "function" w
($1) => {
	$2
}
endsnippet

snippet des "describe" b
describe('$1', () => {
	${2:${VISUAL}}
});
endsnippet

snippet desc "describe" b
describe('$1', () => {
	${2:${VISUAL}}
});
endsnippet

snippet beforeEach "beforeEach" b
beforeEach(() => {
	$2
});
endsnippet

snippet bef "beforeEach" b
beforeEach(() => {
	$2
});
endsnippet

snippet spec "spec test" b
describe('$1', () => {

	beforeEach(() => {
		$2
	});

	it('', () => {
		$3
	});

});
endsnippet

snippet ite "it - empty" b
it('$1');$2
endsnippet

snippet it "it - function" b
it('$1', async () => {
	${2:throw new Error('fail');}
});
endsnippet

snippet if "if statement" b
if ($1) {
	$2
}
endsnippet

snippet for "for loop" b
for (let i = 0; i < $1; i++) {
	$2
}
endsnippet

# vim:ft=snippets:
